-- include "CCO/HM/AG/Base.ag"
include "CCO/SystemF/AG/Base.ag"

imports
{

import Data.Set (Set)
import qualified Data.Set as S
import Control.Arrow
import Control.Monad

}

data TyEnv
 | EmptyTyEnv
 | ConsTyEnv  var :: {Var}  binding :: Ty  envTail :: TyEnv

attr Ty TyEnv
    syn ftv :: (Set TyVar)
    syn stringRep :: String

sem Ty
 | TyVar  lhs.ftv       = S.singleton @a
          lhs.stringRep = @a
 | Arr    lhs.ftv       = @ty1.ftv `S.union` @ty2.ftv
          lhs.stringRep = "(" ++ @ty1.stringRep ++ " -> " ++ @ty2.stringRep ++ ")"
 | Forall lhs.ftv       = S.delete @a @ty1.ftv
          lhs.stringRep = "(forall " ++ @a ++ ". " ++ @ty1.stringRep ++ ")"

sem TyEnv
 | EmptyTyEnv lhs.ftv       = S.empty
              lhs.stringRep = "[]"
 | ConsTyEnv  lhs.ftv       = @binding.ftv `S.union` @envTail.ftv
              lhs.stringRep = "[" ++ @var ++ " -> " ++ @binding.stringRep ++ "]" 
                                          ++ @envTail.stringRep

{

instance Show Ty where
 show ty = stringRep_Syn_Ty $ wrap_Ty (sem_Ty ty) Inh_Ty

instance Show TyEnv where
 show env = stringRep_Syn_TyEnv $ wrap_TyEnv (sem_TyEnv env) Inh_TyEnv

-- | Represents types that only have existential quantification at the top-level.
type TyScheme = Ty

-- | Generator of fresh (type) variables.
newtype VarFactory = VarFactory Int

-- | Initialise a new fresh variable factory.
initVarFactory :: VarFactory
initVarFactory = VarFactory 0

-- | Generate a fresh variable.
freshVar :: VarFactory -> (Var, VarFactory)
freshVar (VarFactory n) = ("_" ++ show n, VarFactory $ n + 1)

-- | Generate a fresh type variable.
freshTyVar :: VarFactory -> (TyVar, VarFactory)
freshTyVar (VarFactory n) = ("__" ++ show n, VarFactory $ n + 1)

gen :: TyEnv -> Ty -> TyScheme
gen env ty = S.foldr Forall ty $ freeVars ty `S.difference` freeEnvVars env

freeVars :: Ty -> Set TyVar
freeVars ty = ftv_Syn_Ty $ wrap_Ty (sem_Ty ty) Inh_Ty

freeEnvVars :: TyEnv -> Set TyVar
freeEnvVars env = ftv_Syn_TyEnv $ wrap_TyEnv (sem_TyEnv env) Inh_TyEnv

inst :: VarFactory -> TyScheme -> (Ty, VarFactory)
inst gen (Forall a t) = let (fresh, gen') = freshTyVar gen
                         in first (subTyVar a $ TyVar fresh) $ inst gen' t
inst gen ty = (ty, gen)

-- | A type substitution.
type TySubst = Ty -> Ty

-- | Substitute one type variable with a type.
subTyVar :: TyVar -> Ty -> TySubst
subTyVar from to = sub
 where sub ty = case ty of
                 TyVar v    | v == from -> to
                            | otherwise -> TyVar v
                 Forall a t | from == a -> Forall a t
                            | otherwise -> Forall a $ sub t
                 Arr t1 t2  -> Arr (sub t1) (sub t2)

-- | Robinson's unification algorithm. Uses Monad 'fail' in case of a type error.
unify :: Monad m => Ty -> Ty -> m TySubst
unify a b =
 case (a,b) of
  (TyVar a, TyVar b) | a == b -> return id
  (TyVar a1, t2)     | not $ a1 `S.member` freeVars t2 -> return $ subTyVar a1 t2
  (t1, TyVar a2)     | not $ a2 `S.member` freeVars t1 -> return $ subTyVar a2 t1
  (Arr t11 t12, Arr t21 t22) -> do u1 <- unify t11 t21
                                   u2 <- unify (u1 t12) (u1 t22)
                                   return $ u2 . u1
  _ -> fail $ concat ["Type error.\n\tExpected: '", show a, "'.\n\tActual: '", show b, "'."]

}