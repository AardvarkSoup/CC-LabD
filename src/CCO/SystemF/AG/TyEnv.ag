-- Defines a datatype representing type environments.

-- Depends on Base.ag.

-- | An environment of variables bound to types.
data TyEnv
 | EmptyTyEnv
 | ConsTyEnv  var :: {Var}  binding :: Ty  envTail :: TyEnv
 
{

instance Show Ty where
 show ty = stringRep_Syn_Ty $ wrap_Ty (sem_Ty ty) (Inh_Ty 0)

instance Show TyEnv where
 show env = stringRep_Syn_TyEnv $ wrap_TyEnv (sem_TyEnv env) (Inh_TyEnv 0)

-- | The empty type environment.
emptyEnv :: TyEnv
emptyEnv = EmptyTyEnv

-- | Look up a variable in an environment.
lookupEnv :: Var -> TyEnv -> Maybe Ty
lookupEnv _ EmptyTyEnv = Nothing
lookupEnv x (ConsTyEnv y t rest) | x == y    = Just t
								 | otherwise = lookupEnv x rest

-- | Insert a binding into an environment.
insertEnv :: Var -> Ty -> TyEnv -> TyEnv
insertEnv = ConsTyEnv

}